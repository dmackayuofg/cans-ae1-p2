|0100
#00 ;sum STA

;write_array ;action STA2
#10 ;loop JSR2

;sum_array ;action STA2
#10 ;loop JSR2

;sum LDA ( working stack now has 0x88, 136 in decimal )
#02 DIV #18 DEO

BRK
( niters:16 -> -- )
@loop
    ( loop with incrementing counter starting at 1, ending at n )
    #00
    &for
    INC ( increment )
    ( DUP #30 ADD #18 DEO )
    DUP ( duplicate the counter so that it can be consumed )
    ;action LDA2 JSR2
    OVR OVR
    ( DUP the comparison also consumes the counter )
    NEQ
    ,&for JCN
    POP POP
    JMP2r

BRK
( example action, consumes a single argument from the stack )
( cnt:16 -> -- )
( we write the value of count to @array )
@write_array
    DUP #00 SWP
    ;array ADD2 STA
    JMP2r

( cnt:16 -> -- )
@sum_array
    #00 SWP
    ;array ADD2 LDA

    ;sum LDA ADD
    ;sum STA
    JMP2r

@sum $1
@action $2
|0200
@array $10
